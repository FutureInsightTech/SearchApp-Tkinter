{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4339e73e-b877-462b-8310-e237ba9bb245",
   "metadata": {},
   "source": [
    "# Searching through Brute Force & KMP Algo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "245c7981-08f0-4cbe-b46f-c9ba6419af88",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import glob\n",
    "import time\n",
    "import tkinter as tk\n",
    "from tkinter import ttk, messagebox"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "963a11f6-9b4f-47e3-951b-78d8f0a0b85e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Brute Force Search Algorithm\n",
    "def brute_force_search(text, pattern):\n",
    "    n = len(text)\n",
    "    m = len(pattern)\n",
    "    locations = []\n",
    "\n",
    "    for i in range(n - m + 1):\n",
    "        j = 0\n",
    "        while j < m and text[i + j] == pattern[j]:\n",
    "            j += 1\n",
    "        if j == m:\n",
    "            locations.append(i)\n",
    "    \n",
    "    return locations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5e07000f-358b-4687-ad1d-ff14e81646d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# KMP Search Algorithm\n",
    "def compute_lps(pattern):\n",
    "    m = len(pattern)\n",
    "    lps = [0] * m\n",
    "    length = 0\n",
    "    i = 1\n",
    "\n",
    "    while i < m:\n",
    "        if pattern[i] == pattern[length]:\n",
    "            length += 1\n",
    "            lps[i] = length\n",
    "            i += 1\n",
    "        else:\n",
    "            if length != 0:\n",
    "                length = lps[length - 1]\n",
    "            else:\n",
    "                lps[i] = 0\n",
    "                i += 1\n",
    "    return lps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "f85e93a9-00d2-4346-8c59-c60465a8148b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def kmp_search(text, pattern):\n",
    "    n = len(text)\n",
    "    m = len(pattern)\n",
    "    lps = compute_lps(pattern)\n",
    "    locations = []\n",
    "    i = 0\n",
    "    j = 0\n",
    "\n",
    "    while i < n:\n",
    "        if pattern[j] == text[i]:\n",
    "            i += 1\n",
    "            j += 1\n",
    "        if j == m:\n",
    "            locations.append(i - j)\n",
    "            j = lps[j - 1]\n",
    "        elif i < n and pattern[j] != text[i]:\n",
    "            if j != 0:\n",
    "                j = lps[j - 1]\n",
    "            else:\n",
    "                i += 1\n",
    "    \n",
    "    return locations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "2fdc3073-45b0-4584-bf06-9b9eb4b39893",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Searching Data into the Data Fram with Whole Words and Case sentivity words\n",
    "def search_dataframe(df, pattern, algorithm='brute_force', case_sensitive=False, whole_word=False):\n",
    "    results = []\n",
    "    \n",
    "    if not pattern:\n",
    "        raise ValueError(\"Search pattern cannot be empty.\")\n",
    "\n",
    "    # Modify pattern and content based on case sensitivity\n",
    "    if not case_sensitive:\n",
    "        pattern = pattern.lower()\n",
    "\n",
    "    # Choose search algorithm\n",
    "    search_func = brute_force_search if algorithm == 'brute_force' else kmp_search\n",
    "\n",
    "    # Search each file (row in the DataFrame)\n",
    "    for index, row in df.iterrows():\n",
    "        filename = row['Filename']\n",
    "        content = row['Content']\n",
    "        \n",
    "        # Modify content based on case sensitivity\n",
    "        if not case_sensitive:\n",
    "            content = content.lower()\n",
    "\n",
    "        # Search the pattern in the content\n",
    "        start_time = time.time()\n",
    "        try:\n",
    "            positions = search_func(content, pattern)\n",
    "        except Exception as e:\n",
    "            raise RuntimeError(f\"Error while searching in file {filename}: {str(e)}\")\n",
    "\n",
    "        end_time = time.time()\n",
    "\n",
    "        # Filter results based on whole word match\n",
    "        if whole_word:\n",
    "            positions = [pos for pos in positions if (pos == 0 or not content[pos - 1].isalnum()) and\n",
    "                         (pos + len(pattern) == len(content) or not content[pos + len(pattern)].isalnum())]\n",
    "\n",
    "        # Record time taken and matches\n",
    "        for pos in positions:\n",
    "            results.append({\n",
    "                'Filename': filename,\n",
    "                'Row': index,\n",
    "                'Column (position)': pos,\n",
    "                'Time Taken (s)': round(end_time - start_time, 4)\n",
    "            })\n",
    "\n",
    "    return results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "1aa93edd-5d39-4340-833a-9cc6530f901f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to run the search when the button is clicked\n",
    "def run_search():\n",
    "    search_text = search_entry.get()\n",
    "    algorithm = algorithm_choice.get()\n",
    "    case_sensitive = case_sensitive_var.get()\n",
    "    whole_word = whole_word_var.get()\n",
    "\n",
    "    if not search_text:\n",
    "        messagebox.showerror(\"Input Error\", \"Please enter the search text.\")\n",
    "        return\n",
    "\n",
    "    try:\n",
    "        results = search_dataframe(df, search_text, algorithm, case_sensitive, whole_word)\n",
    "        if results:\n",
    "            output_text.delete(1.0, tk.END)  # Clear previous results\n",
    "            output_text.insert(tk.END, \"Search Results:\\n\")\n",
    "            output_text.insert(tk.END, \"-\"*50 + \"\\n\")\n",
    "            \n",
    "            # Format and display each result\n",
    "            for result in results:\n",
    "                output_text.insert(tk.END, f\"Filename: {result['Filename']}\\n\")\n",
    "                output_text.insert(tk.END, f\"Row: {result['Row']}\\n\")\n",
    "                output_text.insert(tk.END, f\"Position (Column): {result['Column (position)']}\\n\")\n",
    "                output_text.insert(tk.END, f\"Time Taken: {result['Time Taken (s)']} seconds\\n\")\n",
    "                output_text.insert(tk.END, \"-\"*50 + \"\\n\")  # Separator for each result\n",
    "        else:\n",
    "            output_text.delete(1.0, tk.END)\n",
    "            output_text.insert(tk.END, \"No matches found.\\n\")\n",
    "\n",
    "    except ValueError as ve:\n",
    "        messagebox.showerror(\"Search Error\", str(ve))\n",
    "    except RuntimeError as re:\n",
    "        messagebox.showerror(\"Search Error\", str(re))\n",
    "    except Exception as e:\n",
    "        messagebox.showerror(\"Unexpected Error\", f\"An unexpected error occurred: {str(e)}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cfcc11ea-f4db-412b-89fe-3905601b5b43",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the text files into DataFrame\n",
    "file_pattern = \"Research#*.txt\"\n",
    "data = {'Filename': [], 'Content': []}\n",
    "\n",
    "try:\n",
    "    files_found = glob.glob(file_pattern)\n",
    "    if not files_found:\n",
    "        raise FileNotFoundError(f\"No files found matching pattern {file_pattern}\")\n",
    "\n",
    "    for filepath in files_found:\n",
    "        try:\n",
    "            with open(filepath, 'r', encoding='utf-8') as file:\n",
    "                data['Filename'].append(filepath)\n",
    "                data['Content'].append(file.read())\n",
    "        except Exception as e:\n",
    "            raise IOError(f\"Error reading file {filepath}: {str(e)}\")\n",
    "    \n",
    "    df = pd.DataFrame(data)\n",
    "    if df.empty:\n",
    "        raise ValueError(\"No valid content found in files.\")\n",
    "\n",
    "except FileNotFoundError as fnf_error:\n",
    "    messagebox.showerror(\"File Error\", str(fnf_error))\n",
    "except IOError as io_error:\n",
    "    messagebox.showerror(\"File Error\", str(io_error))\n",
    "except Exception as e:\n",
    "    messagebox.showerror(\"Unexpected Error\", f\"An unexpected error occurred: {str(e)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "ba53dc9a-b338-4a0b-91a4-e4ceb04b62ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "''"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create the main window\n",
    "root = tk.Tk()\n",
    "root.title(\"Text Search App\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "8b6efc2c-288c-4692-a59a-dea263edc102",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create the search text input\n",
    "tk.Label(root, text=\"Enter search text:\").pack(pady=10)\n",
    "search_entry = tk.Entry(root, width=50)\n",
    "search_entry.pack(pady=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "98e91904-1ebf-4a19-8b60-9d3d98e99939",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create the algorithm choice dropdown\n",
    "tk.Label(root, text=\"Choose algorithm:\").pack(pady=10)\n",
    "algorithm_choice = ttk.Combobox(root, values=[\"brute_force\", \"kmp\"])\n",
    "algorithm_choice.current(0)  # Set default to 'brute_force'\n",
    "algorithm_choice.pack(pady=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "2e5341c8-475e-464b-97b9-0533677bb5a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a checkbox for case sensitivity\n",
    "case_sensitive_var = tk.BooleanVar()\n",
    "case_sensitive_checkbox = tk.Checkbutton(root, text=\"Case Sensitive\", variable=case_sensitive_var)\n",
    "case_sensitive_checkbox.pack(pady=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "8876804e-b1c1-412e-97c4-f3a00cb01bdb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a checkbox for whole word match\n",
    "whole_word_var = tk.BooleanVar()\n",
    "whole_word_checkbox = tk.Checkbutton(root, text=\"Whole Word Match\", variable=whole_word_var)\n",
    "whole_word_checkbox.pack(pady=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "00bf42a4-54df-43a8-8fd5-9ed3df0f2def",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create the search button\n",
    "search_button = tk.Button(root, text=\"Search\", command=run_search)\n",
    "search_button.pack(pady=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "d09a48db-74e0-4de3-8375-921fb0469d60",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a text widget to display the output\n",
    "output_text = tk.Text(root, height=20, width=80)\n",
    "output_text.pack(pady=20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "695d32df-1c2c-40f1-b811-96b436338bd0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run the Tkinter event loop\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "acc0871d-8715-4c8d-a4d2-87e1198711c9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1aab054b-73e3-4dc6-a8b7-5d3a26c6fb2d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
